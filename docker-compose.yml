version: "3.9"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093

  minio:
    image: minio/minio:latest
    container_name: minio
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - minio_data:/data
    restart: on-failure

  postgres:
    image: postgres:16
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: storage
      POSTGRES_USER: storage
      POSTGRES_PASSWORD: storage
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U storage -d storage"]
      interval: 5s
      timeout: 5s
      retries: 5

  report-service:
    build: ./report-service
    container_name: report-service
    depends_on:
      minio:
        condition: service_healthy
      kafka:
        condition: service_started
    ports:
      - "8080:8080"
    environment:
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      KAFKA_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_SASL_MECHANISM: PLAIN
      KAFKA_LOGIN_MODULE: org.apache.kafka.common.security.plain.PlainLoginModule
      KAFKA_USERNAME: user
      KAFKA_PASSWORD: pass
      KAFKA_REPORT_TOPIC: bre.report.message
      KAFKA_FEEDBACK_TOPIC: bre.feedback.message

      MINIO_URL: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_ACCESS_SECRET: minioadmin
      MINIO_BUCKET_SCREENSHOT: screenshots
      MINIO_BUCKET_LOG: logs

  storage-service:
    build: ./storage-service
    container_name: storage-service
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    ports:
      - "8082:8080"
    environment:
      SPRING_APPLICATION_NAME: storage-service

      # Kafka config
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      KAFKA_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_SASL_MECHANISM: PLAIN
      KAFKA_LOGIN_MODULE: org.apache.kafka.common.security.plain.PlainLoginModule
      KAFKA_USERNAME: user
      KAFKA_PASSWORD: pass
      KAFKA_FEEDBACK_TOPIC: bre.feedback.message
      KAFKA_REPORT_TOPIC: bre.report.message

      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/storage
      SPRING_DATASOURCE_USERNAME: storage
      SPRING_DATASOURCE_PASSWORD: storage
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver

volumes:
  minio_data:
  postgres_data:
