/*
 * This file is generated by jOOQ.
 */
package ru.bre.storage.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.bre.storage.jooq.Indexes;
import ru.bre.storage.jooq.Keys;
import ru.bre.storage.jooq.Public;
import ru.bre.storage.jooq.tables.records.SummaryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Summary extends TableImpl<SummaryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.summary</code>
     */
    public static final Summary SUMMARY = new Summary();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SummaryRecord> getRecordType() {
        return SummaryRecord.class;
    }

    /**
     * The column <code>public.summary.id</code>.
     */
    public final TableField<SummaryRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.summary.title</code>.
     */
    public final TableField<SummaryRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.summary.text</code>.
     */
    public final TableField<SummaryRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.summary.date</code>.
     */
    public final TableField<SummaryRecord, LocalDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.summary.created_at</code>.
     */
    public final TableField<SummaryRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Summary(Name alias, Table<SummaryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Summary(Name alias, Table<SummaryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.summary</code> table reference
     */
    public Summary(String alias) {
        this(DSL.name(alias), SUMMARY);
    }

    /**
     * Create an aliased <code>public.summary</code> table reference
     */
    public Summary(Name alias) {
        this(alias, SUMMARY);
    }

    /**
     * Create a <code>public.summary</code> table reference
     */
    public Summary() {
        this(DSL.name("summary"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SUMMARY_CREATED_AT, Indexes.IDX_SUMMARY_DATE, Indexes.IDX_SUMMARY_TITLE);
    }

    @Override
    public Identity<SummaryRecord, Integer> getIdentity() {
        return (Identity<SummaryRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SummaryRecord> getPrimaryKey() {
        return Keys.SUMMARY_PKEY;
    }

    @Override
    public Summary as(String alias) {
        return new Summary(DSL.name(alias), this);
    }

    @Override
    public Summary as(Name alias) {
        return new Summary(alias, this);
    }

    @Override
    public Summary as(Table<?> alias) {
        return new Summary(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Summary rename(String name) {
        return new Summary(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Summary rename(Name name) {
        return new Summary(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Summary rename(Table<?> name) {
        return new Summary(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Summary where(Condition condition) {
        return new Summary(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Summary where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Summary where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Summary where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Summary where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Summary where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Summary where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Summary where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Summary whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Summary whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
